<?php
/**
 * @author liyupeng <liyupeng@tomonline-inc.com>
 * @version $WCREV$ $WCDATE$
 * @package websvn
 * @filesource $WCURL$
 *
 */

class KISS_Tools_WebSvn
{
    private $mRepositoryUrl;        // 仓库的URL地址
    private $mCheckoutRootDir;      // 本地拷贝的根目录
    private $mUserName;             // svn的用户名
    private $mPassWord;             // svn的密码
    private $mBaseCommand;          // 基准的svn命令
    private $mCurrentCommand;       // 当前的svn命令
    private $mCommandOutput;        // 命令运行后的输出信息(一维数组)
    private $mExcuteError;          // 命令行是否运行正确
    private $mErrorMessage;         // 命令行运行的错误信息

    /**
     * __construct
     *
     */
    function __construct ($pRepositoryUrl, $pCheckoutRootDir, $pUserName = "", $pPassWord = "")
    {
        $tSvnConfig = parse_ini_file('config.ini', true);
		if(isset($tSvnConfig['Subversion']['config_path']) && isset($tSvnConfig['Subversion']['client_path']))
		{
			$this->mSvnCommand = "{$tSvnConfig['Subversion']['client_path']} --non-interactive --no-auth-cache --config-dir \"{$tSvnConfig['Subversion']['config_path']}\" ";
		}
		else
		{
		    throw new Exception("请重新配置config.ini文件");
		}

        $this->mRepositoryUrl   = dirname($pRepositoryUrl) . "/" . basename($pRepositoryUrl) . "/";
        $this->mCheckoutRootDir = dirname($pCheckoutRootDir) . "/" . basename($pCheckoutRootDir) . "/";
        $this->mUserName        = $pUserName;
        $this->mPassWord        = $pPassWord;

        $command_divide = "\"";

        if(substr(PHP_OS,0,3) != 'WIN')
        {
            $command_divide = "\"";

            $patterns[0] = "/\\\/";
            $patterns[1] = "/[$]/";
            $patterns[2] = "/`/";
            $patterns[3] = "/\"/";

            $replacements[0] = "\\\\\\";
            $replacements[1] = "\\" ."\\$";
            $replacements[2] = "\`";
            $replacements[3] = "\\\"";

            $pPassWord = preg_replace($patterns, $replacements, $pPassWord);
        }

        if($pUserName != "" && $pPassWord != "")
        {
            $this->mBaseCommand = $this->mSvnCommand . "--username {$command_divide}{$pUserName}{$command_divide} --password {$command_divide}{$pPassWord}{$command_divide} ";
        }
        else
        {
            $this->mBaseCommand = $this->mSvnCommand;
        }

        $this->mCurrentCommand = $this->mBaseCommand;

        $this->mExcuteError = false;
    }

    /**
     * 获得svn当前的命令行
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-18
     * @return string
     */
    function getCurrentCommand()
    {
        return $this->mCurrentCommand;
    }

    /**
     * 获得svn命令运行后的输出
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-18
     * @return string
     */
    function getCommandOutput()
    {
        return $this->mCommandOutput;
    }

    /**
     * 在shell端运行命令
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-10
     * @access protected
     * @param  string $pCommand      运行的命令
     * @return string $pReturnFormat 返回shell端的信息的格式：string|array
     */
    function runCommand($pCommand = "", $pReturnFormat = "string")
    {
        $tOutPut = array ();

        $tSetLangCmd = eregi("linux", strtolower(PHP_OS)) ? "export LANG=zh_CN.gb18030;" : "";
        $pCommand = $tSetLangCmd . $pCommand;

        $pCommand .= " 2>&1";

        if ($handle = popen($pCommand, "r"))
        {
            while (!feof($handle))
            {
                $tMsg = rtrim(fgets($handle));
                if($tMsg != "")
                {
                    $tOutPut[] = $tMsg;
                }
                if(!$this->mExcuteError && substr($tMsg, 0, 4) == 'svn:')
                {
                    $this->mExcuteError = true;
                }
            }
            pclose($handle);
        }

        if($this->mExcuteError)
        {
            $this->mErrorMessage = implode("\n", $tOutPut);
        }

        if($pReturnFormat == "array")
        {
            if(count($tOutPut) == 1 && current($tOutPut) == "")
            {
                $tOutPut = array();
            }
            return $tOutPut;
        }
        elseif($pReturnFormat == "string")
        {
            return implode("", $tOutPut);
        }
    }

    /**
     * 运行svn命令
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-11
     * @return string $pReturnFormat 返回shell端的信息的格式：string|array
     * @access protected
     */
    function runSvnCommand($pReturnFormat = "string")
    {
        $this->mCommandOutput = $this->runCommand($this->mCurrentCommand, $pReturnFormat);
    }

    /**
     * 判断svn命令是否运行成功
     *
     * @return bool $pExcuteError 运行成功返回true，失败返回false
     * @access protected
     */
    function isFailed()
    {
        return $this->mExcuteError;
    }

    /**
     * 获得svn运行失败的信息
     *
     * @return bool $pExcuteError 运行成功返回true，失败返回false
     * @access protected
     */
    function getFailedMsg()
    {
        if($this->isFailed())
        {
            return $this->mErrorMessage;
        }
        return "";
    }

    /**
     * 追加svn的命令参数
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-11
     * @access protected
     * @param  mix    可以增加多个svn的参数
     */
    function supperAddParam()
    {
        $pAddCommandList = func_get_args();
        foreach($pAddCommandList as $param)
        {
            $this->mCurrentCommand .= "{$param} ";
        }
    }

    /**
     * 重置当前的svn命令
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-4-21 13:28
     * @access protected
     */
    function resetCurrentCommand()
    {
        $this->mCurrentCommand = $this->mBaseCommand;
    }

    /**
     * 转义svn命令的消息参数中的特殊字符
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-7-20 15:24
     * @access public
     * @param  string $pMsg      消息
     * @return string            转义后的消息
     */
    function transferred($pMsg = "")
    {
        $pMsg = str_replace("`", "\\`", $pMsg);        // 转义SHELL端的特殊字符`
        $pMsg = str_replace("\$", "\\$", $pMsg);       // 转义SHELL端的特殊字符$
        return $pMsg;
    }

    /**
     * 从版本库中取出一个拷贝
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-11
     * @access protected
     */
    function checkout()
    {
        $this->resetCurrentCommand();
        if(!file_exists($this->mCheckoutRootDir) && $this->mCheckoutRootDir != "")
        {
            mkdir($this->mCheckoutRootDir);
        }

        $this->supperAddParam("checkout" , $this->mRepositoryUrl, $this->mCheckoutRootDir);
        $this->runSvnCommand();
    }

    /**
     * 将修改从工作拷贝提交到版本库
     *
     * @author         liyupeng <liyupeng@tomonline-inc.com>
     * @createTime     2006-5-11
     * @access protected
     * @param  mix     $pCommitPath  提交的目标文件夹或文件的相对地址(相对$this->mCheckoutRootDir)，如果传多个文件请用一维数组表示
     * @param  string  $pMsg         提交信息
     */
    function commit($pCommitPath = "", $pMsg = "")
    {
        $this->resetCurrentCommand();
        $pMsg = $this->transferred($pMsg);
        $this->supperAddParam("commit");
        $tCommitPath = $pCommitPath;

        if(is_array($tCommitPath) && !empty($tCommitPath))
        {
            foreach($tCommitPath as $tPath)
            {
                $this->supperAddParam($this->mCheckoutRootDir . $tPath);
            }
        }
        else
        {
            $this->supperAddParam($this->mCheckoutRootDir . $tCommitPath);
        }

        $this->supperAddParam("-m", "\"{$pMsg}\"");
        $this->runSvnCommand();
    }

    /**
     * 添加文件、目录或符号链接到仓库中
     *
     * @author         liyupeng <liyupeng@tomonline-inc.com>
     * @createTime     2006-5-11
     * @access protected
     * @param  string  $pAddPath     增加的目标文件夹或文件，默认从$this->mCheckoutRootDir增加工作拷贝
     * @access protected
     */
    function add($pAddPath = "*")
    {
        if($pAddPath == "")
        {
            $pAddPath = "*";
        }
        $this->resetCurrentCommand();
        $this->mCurrentCommand = $this->mSvnCommand . "add " . $this->mCheckoutRootDir . $pAddPath;
        $this->mCurrentCommand = str_replace("--non-interactive --no-auth-cache ", "", $this->mCurrentCommand);
        $this->runSvnCommand();
    }

    /**
     * 递归提交一个路径的拷贝到url
     *
     * @author         liyupeng <liyupeng@tomonline-inc.com>
     * @createTime     2006-5-11
     * @access protected
     * @param  string  $pAddPath            增加的目标文件夹或文件的路径
     * @param  string  $pAddFileName        相对于目标仓库url的文件名（包含路径）(相对$this->mRepositoryUrl)
     * @param  string  $pMsg                提交信息
     * @access protected
     */
    function import($pAddPath, $pAddFileName="", $pMsg="import")
    {
        $this->resetCurrentCommand();
        $pMsg = $this->transferred($pMsg);

        if($pAddPath != "")
        {
            if(trim($pAddFileName)=="")
            {
                $pAddFileName = basename($pAddPath);
            }
            $this->supperAddParam("import" , $pAddPath, $this->mRepositoryUrl . $pAddFileName);
            $this->supperAddParam("-m", "\"{$pMsg}\"");
            $this->runSvnCommand();
        }
    }

    /**
     * 创建一个文件夹到url
     *
     * @author         liyupeng <liyupeng@tomonline-inc.com>
     * @createTime     2006-5-11
     * @access protected
     * @param  string  $pAddDir         增加的目标文件夹的路径，相对于仓库的根URL，添加多个目录可以用“,”分隔
     * @param  string  $pMsg            提交信息
     * @access protected
     */
    function mkdir($pAddDir, $pMsg = "mkdir")
    {
        $this->resetCurrentCommand();
        $pMsg = $this->transferred($pMsg);

        if($pAddDir != "")
        {
            $tAddDirList = explode(",", $pAddDir);
            $this->supperAddParam("mkdir");
            foreach($tAddDirList as $value)
            {
                $this->supperAddParam($this->mRepositoryUrl . trim($value));
            }
            $this->supperAddParam("-m", "\"{$pMsg}\"");
            $this->runSvnCommand();
        }
    }

    /**
     * 在仓库的URl地址上移动一个文件或目录
     *
     * @author         liyupeng <liyupeng@tomonline-inc.com>
     * @createTime     2006-5-11
     * @access protected
     * @param  string  $pRenameSrc   重命名的目标文件或目录
     * @param  string  $pRenameDst   重命名后的文件或目录
     * @param  string  $pMsg         提交信息
     */
    function move($pRenameSrc, $pRenameDst, $pMsg = "rename")
    {
        $this->resetCurrentCommand();
        $pMsg = $this->transferred($pMsg);

        if($pRenameSrc != "")
        {
            $this->supperAddParam("move", $this->mRepositoryUrl . $pRenameSrc, $this->mRepositoryUrl . $pRenameDst);
            $this->supperAddParam("-m", "\"{$pMsg}\"");
            $this->runSvnCommand();
        }
    }

    /**
     * 在本地拷贝移动一个文件或目录
     *
     * @author         liyupeng <liyupeng@tomonline-inc.com>
     * @createTime     2006-8-1
     * @access protected
     * @param  string  $pRenameSrc   重命名的目标文件或目录
     * @param  string  $pRenameDst   重命名后的文件或目录
     */
    function localMove($pRenameSrc, $pRenameDst)
    {
        $this->resetCurrentCommand();

        if($pRenameSrc != "")
        {
            $this->supperAddParam("move", $this->mCheckoutRootDir . $pRenameSrc, $this->mCheckoutRootDir . $pRenameDst);
            $this->runSvnCommand();
        }
    }

    /**
     * 通过url直接删除仓库中的文件、目录
     *
     * @author         liyupeng <liyupeng@tomonline-inc.com>
     * @createTime     2006-5-11
     * @access protected
     * @param  string  $pDeletePath  删除的目标文件夹或文件的url相对地址(相对$this->mRepositoryUrl)
     * @param  string  $pMsg         提交信息
     * @access protected
     */
    function delete($pDeletePath, $pMsg = "delete")
    {
        $this->resetCurrentCommand();
        $pMsg = $this->transferred($pMsg);

        if($pDeletePath != "")
        {
            $this->supperAddParam("delete" , $this->mRepositoryUrl . $pDeletePath, "-m", "\"{$pMsg}\"");
            $this->runSvnCommand();
        }
    }

    /**
     * 通过本机地址删除文件、目录或符号链接
     *
     * @author         liyupeng <liyupeng@tomonline-inc.com>
     * @createTime     2006-5-11
     * @access protected
     * @param  string  $pDeletePath  删除的目标文件夹或文件的物理相对地址(相对$this->mCheckoutRootDir)
     * @param  string  $pMsg         提交信息
     * @access protected
     */
    function localDelete($pDeletePath)
    {
        $this->resetCurrentCommand();

        if($pDeletePath != "")
        {
            $this->supperAddParam("delete" , $this->mCheckoutRootDir . $pDeletePath);
            $this->runSvnCommand();
        }
    }

    /**
     * 更新工作拷贝
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-11
     * @param string  $pUpdatePath  更新的目标文件夹或文件的相对路径，默认更新整个工作拷贝
     * @access protected
     */
    function update($pUpdatePath = "")
    {
        $this->resetCurrentCommand();

        if($pUpdatePath != "")
        {
            $this->supperAddParam("update" , $this->mCheckoutRootDir . $pUpdatePath);
        }
        else
        {
            $this->supperAddParam("update" , $this->mCheckoutRootDir);
        }
        $this->runSvnCommand();
    }

    /**
     * 递归清理工作拷贝
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-22
     * @param string  $pCleanPath  清理的目标文件夹或文件的相对路径，默认清理整个工作拷贝
     * @access protected
     */
    function clean($pCleanPath)
    {
        $this->resetCurrentCommand();

        if($pCleanPath != "")
        {
            $this->supperAddParam("cleanup" , $this->mCheckoutRootDir . $pCleanPath);
        }
        else
        {
            $this->supperAddParam("cleanup" , $this->mCheckoutRootDir);
        }
        $this->runSvnCommand();
    }

    /**
     * 递归恢复工作拷贝
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2007-1-10
     * @param string  $pCleanPath  恢复的目标文件夹或文件的相对路径，默认恢复整个工作拷贝
     * @access protected
     */
    function revert($pCleanPath = "")
    {
        $this->resetCurrentCommand();
        $this->supperAddParam("revert", "-R", $this->mCheckoutRootDir . $pCleanPath);
        $this->mCurrentCommand = str_replace("--non-interactive --no-auth-cache ", "", $this->mCurrentCommand);
        $this->runSvnCommand();
    }

    /**
     * 查看一个xml字符串是否能被正确解析
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-8-1
     * @access protected
     * @param  string  $pXmlString  要解析的xml字符串
     * @return bool    可以被正确解析则返回true，不可以则返回false
     */
    public function checkXmlParse($pXmlString = "")
    {
        $tPointer = xml_parser_create();
        $tParse = xml_parse_into_struct($tPointer, $pXmlString, $vals, $index);
        xml_parser_free($tPointer);

        if($tParse == 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    /**
     * 查看仓库的文件列表
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-12
     * @access protected
     * @param  string  $pListUrl  目标文件夹或文件的相对地址(相对$this->mRepositoryUrl)
     * @return array
     */
    function listInfo($pListUrl = "")
    {
        $this->resetCurrentCommand();

        $this->supperAddParam("list" , $this->mRepositoryUrl . $pListUrl, "--xml");
        $this->runSvnCommand();

        if(!$this->checkXmlParse($this->mCommandOutput))
        {
            return array();
        }

        $tListInfo = array();
        $tArray = simplexml_load_string($this->mCommandOutput);

        if(!isset($tArray->list)||!isset($tArray->list->entry))
        {
            return array();
        }

        $tResult = $tArray->xpath("list/entry");
        foreach($tResult as $key => $value)
        {
            $tListInfo[$key]["author"] = iconv("UTF-8", "GB18030", $value->commit[0]->author);
            $tListInfo[$key]["name"] = iconv("UTF-8", "GB18030", $value->name);
            $tListInfo[$key]["size"] = intval(iconv("UTF-8", "GB18030", $value->size));
            $tListInfo[$key]["date"] = preg_replace("/^(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}).\d{6}Z$/", "$1 $2", iconv("UTF-8", "GB18030", $value->commit->date));
            $tBjTime = strtotime($tListInfo[$key]["date"])+3600*8;
            $tListInfo[$key]["date"] = date("Y-m-d H:i:s", $tBjTime);
            foreach($tArray->list->entry->commit[0]->attributes() as $tagKey => $tagValue)
            {
                $tListInfo[$key][$tagKey] = strval($tagValue);
            }
            foreach($tArray->list->entry[$key]->attributes() as $tagKey => $tagValue)
            {
                $tListInfo[$key][$tagKey] = strval($tagValue);
            }
        }
        return $tListInfo;
    }

    /**
     * 查看仓库文件的路径信息
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-15
     * @access protected
     * @param  string  $pListUrl  目标文件夹或文件的相对地址(相对$this->mRepositoryUrl)
     * @return array
     */
    function info($pListUrl = "")
    {
        $this->resetCurrentCommand();
        $this->supperAddParam("info" , $this->mRepositoryUrl . $pListUrl, "--xml");

        $this->runSvnCommand();

        if(!$this->checkXmlParse($this->mCommandOutput))
        {
            return array();
        }

        $tArray = simplexml_load_string($this->mCommandOutput);
        $tResult = $tArray->xpath("/info/entry");

        $tInfoList = array();
        foreach($tResult as $key => $value)
        {
            foreach($tArray->entry[$key]->attributes() as $tagKey => $tagValue)
            {
                $tInfoList[$key][$tagKey] = strval($tagValue);
            }

            $tInfoList[$key]["url"] = iconv("UTF-8", "GB18030",$value->url);
            $tInfoList[$key]["repository"]["root"] = iconv("UTF-8", "GB18030",$value->repository->root);

            foreach($tArray->entry[$key]->commit->attributes() as $tagKey => $tagValue)
            {
                $tInfoList[$key]["commit"][$tagKey] = strval($tagValue);
            }
            $tInfoList[$key]["commit"]["author"] = iconv("UTF-8", "GB18030",$value->commit->author);
            $tInfoList[$key]["commit"]["date"] = preg_replace("/^(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}).\d{6}Z$/", "$1 $2", iconv("UTF-8", "GB18030", $value->commit->date));
            $tBjTime = strtotime($tInfoList[$key]["commit"]["date"])+3600*8;
            $tInfoList[$key]["commit"]["date"] = date("Y-m-d H:i:s", $tBjTime);
        }

        return $tInfoList;
    }

    /**
     * 查看仓库文件的历史日志信息
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-15
     * @access protected
     * @param  string  $pListUrl         目标文件夹或文件的相对地址(相对$this->mRepositoryUrl)
     * @param  string  $pStartReversion  查看目标的起始版本号,留空则为查看最新文档，格式可以为数字，日期，支持关键字："HEAD", "BASE", "COMMITTED", "PREV"
     * @param  string  $pEndReversion    查看目标的结束版本号,留空则为查看最新文档，格式可以为数字，日期，支持关键字："HEAD", "BASE", "COMMITTED", "PREV"
     * @return array
     */
    function log($pListUrl = "", $pStartReversion = "", $pEndReversion = "")
    {
        $this->resetCurrentCommand();

        $this->supperAddParam("log" , $this->mRepositoryUrl . $pListUrl, "--xml", "-v");

        $pReversion = $this->getStandardReversions($pStartReversion, $pEndReversion);

        if($pReversion != "")
        {
            $this->supperAddParam("-r" , $pReversion);
        }

        $this->runSvnCommand();

        if(!$this->checkXmlParse($this->mCommandOutput))
        {
            return array();
        }

        $tArray = simplexml_load_string($this->mCommandOutput);
        $tResult = $tArray->xpath("/log/logentry");
        $tLogInfo = array();
        foreach($tResult as $key => $value)
        {
            $tLogInfo[$key]["author"] = iconv("UTF-8", "GB18030", $value->author);
            $tLogInfo[$key]["date"] = preg_replace("/^(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}).\d{6}Z$/", "$1 $2", iconv("UTF-8", "GB18030", $value->date));
            $tBjTime = strtotime($tLogInfo[$key]["date"])+3600*8;
            $tLogInfo[$key]["date"] = date("Y-m-d H:i:s", $tBjTime);
            $tLogInfo[$key]["msg"] = iconv("UTF-8", "GB18030", $value->msg);

            $i = 0;
            foreach($tArray->logentry[$key]->paths->path as $tPathKey => $tPath)
            {
                $tLogInfo[$key]["paths"][$i]["path"] = strval($tPath);
                foreach($tPath->attributes() as $tagPathKey => $tagPathValue)
                {
                    $tLogInfo[$key]["paths"][$i][$tagPathKey] = strval($tagPathValue);
                }
                $i ++;
            }

            foreach($tArray->logentry[$key]->attributes() as $tagKey => $tagValue)
            {
                $tLogInfo[$key][$tagKey] = strval($tagValue);
            }
        }

        return $tLogInfo;
    }

    /**
     * 通过URL取得特定文件的内容
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-5-22 14:54
     * @access public
     * @param  string $pUrl      文件的URL地址
     * @param  int    $pVersion  文件的版本号
     * @return string            文件的内容
     */
    function cat($pUrl, $pVersion=0)
    {
        $this->resetCurrentCommand();

        $this->supperAddParam("cat" , $this->mRepositoryUrl . $pUrl);

        if($pVersion > 0)
        {
            $this->supperAddParam("-r" , $pVersion);
        }

        ob_start();
        passthru($this->getCurrentCommand());
        $this->mCommandOutput = ob_get_contents();
        ob_clean();

        return $this->mCommandOutput;
    }

    /**
     * 将reversion参数规范为svn -r选项可用的参数
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-9-18 16:30
     * @access public
     * @param  string  $pStartReversion  目标的起始版本号,留空则为查看最新文档，格式可以为数字，日期
     * @param  string  $pEndReversion    目标的结束版本号,留空则为查看最新文档，格式可以为数字，日期
     * @return string                    拼接后的文件的版本号
     */
    function getStandardReversions($pStartReversion = "", $pEndReversion = "")
    {
        $pStartReversion = $this->specReversion($pStartReversion);
        $pEndReversion = $this->specReversion($pEndReversion);

        if($pStartReversion != "")
        {
            if($pEndReversion != "")
            {
                return $pStartReversion . ":" . $pEndReversion;
            }
            else
            {
                return $pStartReversion;
            }
        }
        else
        {
            return "";
        }
    }

    /**
     * 将reversion参数规范为svn -r选项可用的参数
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-9-18 16:30
     * @access public
     * @param  int    $pVersion  文件的版本号
     * @return string            文件的版本号
     */
    function specReversion($pReversion = "")
    {
        $gReversionKeyWords = array("HEAD", "BASE", "COMMITTED", "PREV");

        if($pReversion == "")
        {
            return $pReversion;
        }

        if(strtotime($pReversion))
        {
            return "{\"" . $pReversion . "\"}";
        }
        elseif(in_array($pReversion, $gReversionKeyWords))
        {
            return $pReversion;
        }
        else
        {
            return intval($pReversion);
        }
    }

    /**
     * 查看文件/目录是否存在与仓库中
     *
     * @author        liyupeng <liyupeng@tomonline-inc.com>
     * @createTime    2006-9-18 18:21
     * @access protected
     * @param  string  $pUrl         目标文件夹或文件的相对地址(相对$this->mRepositoryUrl)
     * @return array
     */
    function isInRepository($pUrl = "")
    {
        $tUrlInfo = $this->info($pUrl);
        if(empty($tUrlInfo))
        {
            return false;
        }
        return true;
    }
}
?>
